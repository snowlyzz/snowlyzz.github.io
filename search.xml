<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>JAVA动态加载字节码</title>
      <link href="/2023/05/16/JAVA%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BD%E5%AD%97%E8%8A%82%E7%A0%81/"/>
      <url>/2023/05/16/JAVA%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BD%E5%AD%97%E8%8A%82%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是JAVA的字节码？"><a href="#什么是JAVA的字节码？" class="headerlink" title="什么是JAVA的字节码？"></a>什么是JAVA的字节码？</h1><p>字节码 其实指的是Java虚拟机运行执行的指令，通过编译后，通常被储存在 &#x3D;&#x3D;.class&#x3D;&#x3D;  文件中。<br>因为语言是跨平台的，其他语言可以通过编译成 &#x3D;&#x3D;.class&#x3D;&#x3D; 文件后，在Java虚拟机中运行~<br>但本文想要说的是字节码 可以将.class 文件 恢复成一个类，在Jvm虚拟机中加载。</p><h1 id="利用URLClassLoader-加载远程文件"><a href="#利用URLClassLoader-加载远程文件" class="headerlink" title="利用URLClassLoader 加载远程文件"></a>利用URLClassLoader 加载远程文件</h1><p>正常情况下 会以 三种情况来寻找 &#x3D;&#x3D;.class&#x3D;&#x3D;文件 ：</p><ul><li>URL未以斜杠 &#x2F; 结尾，则认为是一个JAR文件，使用 JarLoader 来寻找类，即为在Jar包中寻 找.class文件</li><li>URL以斜杠 &#x2F; 结尾，且协议名是 file ，则使用 FileLoader 来寻找类，即为在本地文件系统中寻 找.class文件</li><li>URL以斜杠 &#x2F; 结尾，且协议名不是 file ，则使用最基础的 Loader 来寻找类</li></ul><p>如果是非 file 协议的情况下，最常见使用的协议 则是 &#x3D;&#x3D;http&#x3D;&#x3D;协议</p><p>接下来测试一下在JAVA中是否能够从远程 HTTP 中加载 .class 文件：</p><p>起一个测试文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">package dynamic;  </span><br><span class="line">  </span><br><span class="line">import java.net.URL;  </span><br><span class="line">import java.net.URLClassLoader;  </span><br><span class="line">public class Test &#123;  </span><br><span class="line">    public static void main( String[] args ) throws Exception &#123;  </span><br><span class="line">        URL[] urls = &#123;new URL(&quot;http://localhost:8000/&quot;)&#125;;  </span><br><span class="line">        URLClassLoader loader = URLClassLoader.newInstance(urls);  </span><br><span class="line">        Class c = loader.loadClass(&quot;Hello&quot;);  </span><br><span class="line">        c.newInstance();  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Hello.java:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">package dynamic;  </span><br><span class="line">  </span><br><span class="line">import java.io.IOException;  </span><br><span class="line">  </span><br><span class="line">public class Hello &#123;  </span><br><span class="line">    public Hello() throws IOException &#123;  </span><br><span class="line">  </span><br><span class="line">        System.out.println(&quot;Hello World&quot;);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将 Hello.java 编译成 .class 文件 并在本目录起个 Python 服务：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m http.server</span><br></pre></td></tr></table></figure><p><img src="/2023/05/16/JAVA%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BD%E5%AD%97%E8%8A%82%E7%A0%81/1.png" alt="one"></p><p>成功请求到 Hello.class 并执行了其中的字节码 输出Hello World，如果能控制目标 Java ClassLoader的路径作为一个http服务器，则可以利用远程加载的方式执行任意代码。</p><h1 id="利用ClassLoader-define加载远程字节码"><a href="#利用ClassLoader-define加载远程字节码" class="headerlink" title="利用ClassLoader#define加载远程字节码"></a>利用ClassLoader#define加载远程字节码</h1><p>无论是加载远程文件 还是本地的&#x3D;&#x3D;jar&#x3D;&#x3D; 或&#x3D;&#x3D;.class&#x3D;&#x3D; 都会经过三个方法的调用。</p><p>通俗的分类：</p><ul><li>loadClass 在本地类缓存中、夫加载器中寻找类，如没有找到，则执行 findClass</li><li>findClass 根据基础&#x3D;&#x3D;URL指定的方式&#x3D;&#x3D;来加载类的字节码 然后交给 defineClass</li><li>defineClass 处理前面传入的字节码，将其处理成真正的Java类</li></ul><p>可见核心是 defineClass  他的行为就是将字节码的形式转换成一个Java类。</p><p>在 &#x3D;&#x3D;defineClass&#x3D;&#x3D;  调用时，类对象是不会被初始化的，只有这个对象&#x3D;&#x3D;显式&#x3D;&#x3D;的调用&#x3D;&#x3D;构造函数&#x3D;&#x3D; 初始化代码才会执行，即使是放入static 块中。 &#x3D;&#x3D;ClassLoader&#x3D;&#x3D;类中的&#x3D;&#x3D;defineClass&#x3D;&#x3D; 是个 &#x3D;&#x3D;protected&#x3D;&#x3D; 属性，所以如果我们想要使用 &#x3D;&#x3D;defineClass&#x3D;&#x3D; 则需要使用 &#x3D;&#x3D;反射&#x3D;&#x3D; 来调用 ,这个 &#x3D;&#x3D;defineClass&#x3D;&#x3D;  是 &#x3D;&#x3D;TemplateImpl&#x3D;&#x3D; 攻击链的重点</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">package dynamic;  </span><br><span class="line">import java.lang.reflect.Method;  </span><br><span class="line">import java.util.Base64;  </span><br><span class="line">public class HelloDefineClass &#123;  </span><br><span class="line">    public static void main(String[] args) throws Exception &#123;  </span><br><span class="line">        Method defineClass = ClassLoader.class.getDeclaredMethod(&quot;defineClass&quot;, String.class, byte[].class, int.class, int.class);  </span><br><span class="line">        defineClass.setAccessible(true);  </span><br><span class="line">        byte[] code = Base64.getDecoder().decode(&quot;yv66vgAAADQAGwoABgANCQAOAA8IABAKABEAEgcAEwcAFAEABjxpbml0PgEAAygpVgEABENvZGUBAA9MaW5lTnVtYmVyVGFibGUBAApTb3VyY2VGaWxlAQAKSGVsbG8uamF2YQwABwAIBwAVDAAWABcBAAtIZWxsbyBXb3JsZAcAGAwAGQAaAQAFSGVsbG8BABBqYXZhL2xhbmcvT2JqZWN0AQAQamF2YS9sYW5nL1N5c3RlbQEAA291dAEAFUxqYXZhL2lvL1ByaW50U3RyZWFtOwEAE2phdmEvaW8vUHJpbnRTdHJlYW0BAAdwcmludGxuAQAVKExqYXZhL2xhbmcvU3RyaW5nOylWACEABQAGAAAAAAABAAEABwAIAAEACQAAAC0AAgABAAAADSq3AAGyAAISA7YABLEAAAABAAoAAAAOAAMAAAACAAQABAAMAAUAAQALAAAAAgAM&quot;);  </span><br><span class="line">        Class hello = (Class)defineClass.invoke(ClassLoader.getSystemClassLoader(), &quot;Hello&quot;, code, 0, code.length);  </span><br><span class="line">        hello.newInstance();  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="利用TemplatesImpl进行加载字节码"><a href="#利用TemplatesImpl进行加载字节码" class="headerlink" title="利用TemplatesImpl进行加载字节码"></a>利用TemplatesImpl进行加载字节码</h1><p>底层链 运用到了 我们的主角 &#x3D;&#x3D;defineClass&#x3D;&#x3D;  ~  </p><p>依赖：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">    &lt;groupId&gt;org.apache.commons&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;commons-collections4&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;4.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>本来不想跟链子的，之前也审过没发出来，  但作为本篇的第一篇 还是跟一下吧</p><p>在  &#x3D;&#x3D;TemplatesImpl&#x3D;&#x3D;  的 &#x3D;&#x3D;TransletClassLoader&#x3D;&#x3D; 重载了 &#x3D;&#x3D;defineClass&#x3D;&#x3D;  方法 ，有点长，去头去尾贴出来：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">static final class TransletClassLoader extends ClassLoader &#123;  </span><br><span class="line">    private final Map&lt;String, Class&lt;?&gt;&gt; _loadedExternalExtensionFunctions;  </span><br><span class="line">  </span><br><span class="line">    @Override  </span><br><span class="line">    public Class&lt;?&gt; loadClass(String name) throws ClassNotFoundException &#123;  </span><br><span class="line">        Class&lt;?&gt; ret = null;  </span><br><span class="line">        // The _loadedExternalExtensionFunctions will be empty when the  </span><br><span class="line">        // SecurityManager is not set and the FSP is turned off        if (_loadedExternalExtensionFunctions != null) &#123;  </span><br><span class="line">            ret = _loadedExternalExtensionFunctions.get(name);  </span><br><span class="line">        &#125;  </span><br><span class="line">        if (ret == null) &#123;  </span><br><span class="line">            ret = super.loadClass(name);  </span><br><span class="line">        &#125;  </span><br><span class="line">        return ret;  </span><br><span class="line">     &#125;  </span><br><span class="line">    </span><br><span class="line">     Class&lt;?&gt; defineClass(final byte[] b) &#123;  </span><br><span class="line">        return defineClass(null, b, 0, b.length);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    Class&lt;?&gt; defineClass(final byte[] b, ProtectionDomain pd) &#123;  </span><br><span class="line">        return defineClass(null, b, 0, b.length, pd);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的&#x3D;&#x3D;defineClass&#x3D;&#x3D; 没有写明类型，默认为default 所以只能被内部调用。</p><p>再跟进谁调用了 此 &#x3D;&#x3D;defineClass(x,y)&#x3D;&#x3D; 在&#x3D;&#x3D;defineTransletClasses()&#x3D;&#x3D;中发现 ：</p><p>代码很长 只贴部分<br>![[Pasted image 20230515225535.png]]</p><p>调用了 两个形参的 defineClass ，再紧接着 跟进谁调用了 &#x3D;&#x3D;defineTransletClasses&#x3D;&#x3D;，发现是  &#x3D;&#x3D;getTransletInstance&#x3D;&#x3D;</p><p>![[Pasted image 20230515230051.png]]</p><p>再向上取  &#x3D;&#x3D;newTransformer&#x3D;&#x3D; 调用了 &#x3D;&#x3D;getTransletInstance&#x3D;&#x3D;  而newTransformer 又被getOutputProperties调用 ，至此结束，并且 &#x3D;&#x3D;newTransformer&#x3D;&#x3D; 和 &#x3D;&#x3D;getOutputProperties&#x3D;&#x3D;是一个public 的类型，可以被外部调用。</p><p>![[Pasted image 20230515230451.png]]</p><p>调用链为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">TemplatesImpl#getOutputProperties() -&gt; </span><br><span class="line">TemplatesImpl#newTransformer() -&gt; </span><br><span class="line">TemplatesImpl#getTransletInstance() -&gt; </span><br><span class="line">TemplatesImpl#defineTransletClasses() -&gt; </span><br><span class="line">TransletClassLoader#defineClass()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>知道了 调用链，就要开始满足 其调用的传参，也就是构成exp 的细节 从调用链的开头来设计参数，从 &#x3D;&#x3D;newTransformer&#x3D;&#x3D; 开始 ：</p><p>调用了  &#x3D;&#x3D;getTransletInstance()&#x3D;&#x3D; 且不需要传参</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public synchronized Transformer newTransformer()  </span><br><span class="line">    throws TransformerConfigurationException  </span><br><span class="line">&#123;  </span><br><span class="line">    TransformerImpl transformer;  </span><br><span class="line">  </span><br><span class="line">    transformer = new TransformerImpl(getTransletInstance(), _outputProperties,  </span><br><span class="line">        _indentNumber, _tfactory);</span><br></pre></td></tr></table></figure><p>&#x3D;&#x3D;getTransletInstance()&#x3D;&#x3D;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">private Translet getTransletInstance()  </span><br><span class="line">    throws TransformerConfigurationException &#123;  </span><br><span class="line">    try &#123;  </span><br><span class="line">        if (_name == null) return null;  </span><br><span class="line">  </span><br><span class="line">        if (_class == null) defineTransletClasses();</span><br></pre></td></tr></table></figure><p>这里需要满足 &#x3D;&#x3D;name 和 class&#x3D;&#x3D; 不为 null，  才会调用 &#x3D;&#x3D;defineTransletClasses()&#x3D;&#x3D;<br>这里的两个值 都是保护属性，所以我们需要反射 暴力修改其值，不过都是后话<br>![[Pasted image 20230515231854.png]]</p><p>来到 &#x3D;&#x3D;defineTransletClasses()&#x3D;&#x3D; 看到前面有个判断<br>![[Pasted image 20230515232216.png]]</p><p>这里的 bytecodes 需要不为null 才能继续往下走，那么我们到这就是要设 3个值了</p><p>此处 的&#x3D;&#x3D;loader.defineClass(bytecodes[i])&#x3D;&#x3D; 可以看出 bytecodes 就是我们要加载的 字节码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for (int i = 0; i &lt; classCount; i++) &#123;  </span><br><span class="line">    _class[i] = loader.defineClass(_bytecodes[i], pd);  </span><br><span class="line">    final Class&lt;?&gt; superClass = _class[i].getSuperclass();</span><br></pre></td></tr></table></figure><p>但在中间还有个坑  那就是在中间会执行 run() 方法：</p><p>![[Pasted image 20230515232717.png]]</p><p>调用的是  &#x3D;&#x3D;tfactory.getExternalExtensionsMap()&#x3D;&#x3D;  跟进后，发现getExternalExtensionsMap()是TransformerFactoryImpl类<br>![[Pasted image 20230515232858.png]]</p><p>构造 &#x3D;&#x3D;tfactory&#x3D;&#x3D; 为 &#x3D;&#x3D;TransformerFactoryImpl&#x3D;&#x3D; 类即可~</p><p>简单的POC：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">package dynamic;  </span><br><span class="line">import com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;  </span><br><span class="line">import com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;  </span><br><span class="line">import java.lang.reflect.Field;  </span><br><span class="line">import java.util.Base64;  </span><br><span class="line">public class HelloDefineClass &#123;  </span><br><span class="line">    public static void main(String[] args) throws Exception &#123;  </span><br><span class="line">            byte[] code =  </span><br><span class="line">                Base64.getDecoder().decode(&quot;yv66vgAAADQAIQoABgASCQATABQIABUKABYAFwcAGAcAGQEACXRyYW5zZm9ybQEAcihMY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTtbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEABENvZGUBAA9MaW5lTnVtYmVyVGFibGUBAApFeGNlcHRpb25zBwAaAQCmKExjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvRE9NO0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL2R0bS9EVE1BeGlzSXRlcmF0b3I7TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEABjxpbml0PgEAAygpVgEAClNvdXJjZUZpbGUBABdIZWxsb1RlbXBsYXRlc0ltcGwuamF2YQwADgAPBwAbDAAcAB0BABNIZWxsbyBUZW1wbGF0ZXNJbXBsBwAeDAAfACABABJIZWxsb1RlbXBsYXRlc0ltcGwBAEBjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvcnVudGltZS9BYnN0cmFjdFRyYW5zbGV0AQA5Y29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL1RyYW5zbGV0RXhjZXB0aW9uAQAQamF2YS9sYW5nL1N5c3RlbQEAA291dAEAFUxqYXZhL2lvL1ByaW50U3RyZWFtOwEAE2phdmEvaW8vUHJpbnRTdHJlYW0BAAdwcmludGxuAQAVKExqYXZhL2xhbmcvU3RyaW5nOylWACEABQAGAAAAAAADAAEABwAIAAIACQAAABkAAAADAAAAAbEAAAABAAoAAAAGAAEAAAAIAAsAAAAEAAEADAABAAcADQACAAkAAAAZAAAABAAAAAGxAAAAAQAKAAAABgABAAAACgALAAAABAABAAwAAQAOAA8AAQAJAAAALQACAAEAAAANKrcAAbIAAhIDtgAEsQAAAAEACgAAAA4AAwAAAA0ABAAOAAwADwABABAAAAACABE=&quot;);  </span><br><span class="line">            TemplatesImpl obj = new TemplatesImpl();  </span><br><span class="line">            setFieldValue(obj, &quot;_bytecodes&quot;, new byte[][] &#123;code&#125;);  </span><br><span class="line">            setFieldValue(obj, &quot;_name&quot;, &quot;Ku1s-&quot;);  </span><br><span class="line">            setFieldValue(obj, &quot;_tfactory&quot;, new TransformerFactoryImpl());  </span><br><span class="line">            obj.newTransformer();  </span><br><span class="line">        &#125;  </span><br><span class="line">        public static void setFieldValue(Object obj,String name, Object value) throws NoSuchFieldException, IllegalAccessException &#123;  </span><br><span class="line">            Field field = obj.getClass().getDeclaredField(name);  </span><br><span class="line">            field.setAccessible(true);  </span><br><span class="line">            field.set(obj,value);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>其中 ，setFieldValue 方法用来设置私有属性，可见，这里我设置了三个属性： _bytecodes 、 _name 和 _tfactory 。 _bytecodes 是由字节码组成的数组； _name 可以是任意字符串，只要不为null即可； _tfactory 需要是一个 TransformerFactoryImpl 对象，因为 TemplatesImpl#defineTransletClasses() 方法里有调用到 _tfactory.getExternalExtensionsMap() ，如果是null会出错</p><p>但有个点需要注意 TemplatesImpl 中对加载的字节码是有一定要求的：这个字节码对应的类必须是 com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet 的子类。<br>分析下具体原因：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">private int _transletIndex = -1;</span><br><span class="line">..............................</span><br><span class="line"></span><br><span class="line">if (superClass.getName().equals(ABSTRACT_TRANSLET)) &#123;</span><br><span class="line">    _transletIndex = i;</span><br><span class="line">&#125;</span><br><span class="line"> else &#123;</span><br><span class="line">    _auxClasses.put(_class[i].getName(), _class[i]);</span><br><span class="line">    &#125;     </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if (_transletIndex &lt; 0) &#123;</span><br><span class="line">   ErrorMsg err= new ErrorMsg(ErrorMsg.NO_MAIN_TRANSLET_ERR, _name);</span><br><span class="line">   throw new TransformerConfigurationException(err.toString());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在defineTransletClasses()中，else中的_auxClasses默认值为null，所以调用put方法后就会报错，而且_transletIndex 默认值为-1，即使给_auxClasses赋值也会在下边的if处抛出异常从而报错，所以这里就需要进入if语句，而if中会判断父类名是否跟ABSTRACT_TRANSLET相同，跟进看下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">private static String ABSTRACT_TRANSLET</span><br><span class="line">= &quot;com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet&quot;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>所以在构造时就需要继承于<code>AbstractTranslet</code>，而<code>AbstractTranslet</code>是个抽象类就需要实现它未实现的接口，可以看到第一个的&#96;transform()</p><p>而<code>AbstractTranslet</code>还继承了<code>Translet</code>，<code>Translet</code>也有一个<code>transform()</code>没有实现，所以在这里就需要同时实现两个类的<code>transform()</code>，即：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">import com.sun.org.apache.xalan.internal.xsltc.DOM; </span><br><span class="line">import com.sun.org.apache.xalan.internal.xsltc.TransletException; </span><br><span class="line">import com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet; </span><br><span class="line">import com.sun.org.apache.xml.internal.dtm.DTMAxisIterator; </span><br><span class="line">import com.sun.org.apache.xml.internal.serializer.SerializationHandler; </span><br><span class="line">public class HelloTemplatesImpl extends AbstractTranslet &#123; </span><br><span class="line">public void transform(DOM document, SerializationHandler[] handlers) throws TransletException &#123;&#125; </span><br><span class="line">public void transform(DOM document, DTMAxisIterator iterator, SerializationHandler handler) throws TransletException &#123;&#125; </span><br><span class="line">public HelloTemplatesImpl() &#123; </span><br><span class="line">super();</span><br><span class="line">System.out.println(&quot;Hello TemplatesImpl&quot;); </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>它继承了 AbstractTranslet 类，并在构造函数里插入Hello的输出。将其编译成字节码，即可被 TemplatesImpl 执行了：<br>![[Pasted image 20230515235117.png]]</p><p>实测 jdk 66 无法执行， 而jdk 321 可以 ，在多个Java反序列化利用链，以及fastjson、jackson的漏洞中，都曾出现过 TemplatesImpl 的身影，这 个系列后文中仍然会再次见到它的身影。</p><h1 id="利用BCEL-ClassLoader加载字节码"><a href="#利用BCEL-ClassLoader加载字节码" class="headerlink" title="利用BCEL ClassLoader加载字节码"></a>利用BCEL ClassLoader加载字节码</h1><p>可以先参考 p 神的 [BCEL Cassloader](<a href="https://www.leavesongs.com/PENETRATION/where-is-bcel-classloader.html">BCEL ClassLoader去哪了 | 离别歌 (leavesongs.com)</a>)</p>]]></content>
      
      
      <categories>
          
          <category> JAVA安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
